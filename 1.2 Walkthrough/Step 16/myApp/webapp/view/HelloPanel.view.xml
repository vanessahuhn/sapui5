<!--The whole content for the panel is now added to the new file HelloPanel.view.xml.
We also specify the controller for the view by setting the controllerName attribute of the XML view.-->
<!--We add a new button to the view to open the dialog. It simply calls an event handler function in the controller of the panel’s content view.
We will need the new id="helloDialogButton" in Step 29: Integration Test with OPA.
It is a good practice to set a unique ID like helloWorldButton to key controls of your app so that can be identified easily.
If the attribute `id` is not specified, the OpenUI5 runtime generates unique but changing ID like `__button23` for the control.
Inspect the DOM elements of your app in the browser to see the difference.-->
<mvc:View controllerName="sap.ui.demo.walkthrough.controller.HelloPanel" xmlns="sap.m" xmlns:mvc="sap.ui.core.mvc">
	<Panel headerText="{i18n>helloPanelTitle}" class="sapUiResponsiveMargin" width="auto">
		<content>
			<!--We add a new button to the view to open the dialog.
			It simply calls an event handler function in the controller of the panel’s content view.-->
			<Button id="helloDialogButton" text="{i18n>openDialogButtonText}" press=".onOpenDialog" class="sapUiSmallMarginEnd"/>
			<Button text="{i18n>showHelloButtonText}" press=".onShowHello" class="myAppDemoWT myCustomButton"/>
			<Input value="{/recipient/name}" valueLiveUpdate="true" width="60%"/>
			<FormattedText htmlText="Hello {/recipient/name}" class="sapUiSmallMargin sapThemeHighlight-asColor myCustomText"/>
		</content>
	</Panel>
</mvc:View>