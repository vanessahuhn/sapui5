<!--The root node of the XML structure is the view.
Here, we reference the default namespace sap.m where the majority of our UI assets are located.
We define an additional sap.ui.core.mvc namespace with alias mvc,
where the SAPUI5 views and all other Model-View-Controller (MVC) assets are located.-->
<!--Inside the view tag, we add the declarative definition of our text control with the same properties as in the previous step.
The XML tags are mapped to controls and the attributes are mapped to the properties of the control.-->
<!--We add a reference to the controller, and replace the text control with a button with text “Say Hello”.
The button triggers the .onShowHello event handler function when being pressed.
We also have to specify the name of the controller that is connected to the view
and holds the .onShowHello function by setting the controllerName attribute of the view.
A view does not necessarily need an explicitly assigned controller.
You do not have to create a controller if the view is just displaying information and no additional functionality is required.
If a controller is specified, it is instantiated after the view is loaded.-->
<!--We add an sap.m.Input control to the view. With this, the user can enter a recipient for the greetings.
We bind its value to a SAPUI5 model by using the declarative binding syntax for XML views:
The curly brackets {…} indicate that data is taken from the value of the recipient's object name property. This is called "data binding".
/recipient/name declares the path in the model.-->
<!--We put both the input field and the button inside a containing control called sap.m.Page.
The page provides an aggregation to 0..N other controls called content.
It also displays the title attribute in a header section on top of the content.
The page itself is placed into the pages aggregation of another control called sap.m.App which does the following important things for us:
It writes a bunch of properties into the header of the index.html that are necessary for proper display on mobile devices.
It offers functionality to navigate between pages with animations. We will use this soon.
In order to make the fullscreen height of the view work properly, we add the displayBlock attribute with the value true to the view.
The actual content is wrapped inside a Panel control, in order to group related content.-->
<!--The shell control is now the outermost control of our app and automatically displays a so-called letterbox,
if the screen size is larger than a certain width.
Note : We do not add the Shell control to the declarative UI definition in the XML view,
because apps that run in an external shell, like the SAP Fiori launchpad, there will already be a shell around the component UI.
There are further options to customize the shell, like setting a custom background image or color and setting a custom logo.
Check the related API reference for more details.-->
<!--To layout the panel, we add the CSS class sapUiResponsiveMargin that will add some space around the panel.
We have to set the width of the panel to auto since the margin would otherwise be added to the default width of 100% and exceed the page size.
If you decrease the screen size, then you can actually see that the margin also decreases.
As the name suggests, the margin is responsive and adapts to the screen size of the device.
Tablets will get a smaller margin and phones in portrait mode will not get a margin to save space on these small screens.
Margins can be added to all kinds of controls and are available in many different options.
We can even add space between the button and the input field by adding class sapUiSmallMarginEnd to the button.
To format the output text individually, we remove the description from the input field and add a new Text control with the same value.
Here we also use a small margin to align it with the other content.
Similarly, we could add the standard padding classes to layout the inner parts of container controls such as our panel,
but as it already brings a padding by default, this is not needed here.-->
<!--The app control is configured with our custom namespace class myAppDemoWT.
This class has no styling rules set and is used in the definition of the CSS rules to define CSS selectors that are only valid for this app.
We add our custom CSS class to the button to precisely define the space between the button and the input field.
Now we have a pixel-perfect design for the panel content.
To highlight the output text, we use a FormattedText control which can be styled individually, either by using custom CSS or with HTML code.
We add our custom CSS class (myCustomText) and add a theme-dependent CSS class to set the highlight color that is defined in the theme.
The actual color now depends on the selected theme which ensures that the color always fits to the theme and is semantically clear.
For a complete list of the available CSS class names, see CSS Classes for Theme Parameters.-->
<!--Instead of putting the panel and its content directly into our App view, we will move it to a new separate HelloPanel view.
We refer to this using an XMLView tag in the content aggregation of the panel.-->
<!--In order to make the fullscreen height of the view work properly, we add the displayBlock attribute with the value true to the view.-->
<mvc:View controllerName="sap.ui.demo.walkthrough.controller.App" xmlns="sap.m" xmlns:mvc="sap.ui.core.mvc" displayBlock="true">
	<!--The shell control is now the outermost control of our app and automatically displays a so-called letterbox,
	if the screen size is larger than a certain width.
	There are further options to customize the shell, like setting a custom background image or color and setting a custom logo.-->
	<Shell>
		<!--The page itself is placed into the pages aggregation of another control called sap.m.App which does the following important things for us:
		It writes a bunch of properties into the header of the index.html that are necessary for proper display on mobile devices.
		It offers functionality to navigate between pages with animations-->
		<!--The app control is configured with our custom namespace class myAppDemoWT.
		This class has no styling rules set
		and is used in the definition of the CSS rules to define CSS selectors that are only valid for this app.-->
		<App class="myAppDemoWT">
			<pages>
				<!--We put both the input field and the button inside a containing control called sap.m.Page.
				The page provides an aggregation to 0..N other controls called content.
				It also displays the title attribute in a header section on top of the content.-->
				<Page title="{i18n>homePageTitle}">
					<content>
						<!--The actual content is wrapped inside a Panel control, in order to group related content.-->
						<!--To layout the panel, we add the CSS class sapUiResponsiveMargin that will add some space around the panel.
						We have to set the width of the panel to auto since the margin would otherwise be added to the default width of 100%
						and exceed the page size.
						If you decrease the screen size, then you can actually see that the margin also decreases.
						As the name suggests, the margin is responsive and adapts to the screen size of the device.
						Tablets will get a smaller margin and phones in portrait mode will not get a margin to save space on these small screens.
						Margins can be added to all kinds of controls and are available in many different options.-->
						<!--<Panel headerText="{i18n>helloPanelTitle}" class="sapUiResponsiveMargin" width="auto">-->
							<!--<content>-->
								<!--<Text text="Hello World"/>-->
								<!--	<Button	text="Say Hello" press=".onShowHello"/>-->
								<!--In the XML view, we use data binding to connect the button text to the showHelloButtonText property in the i18n model.
								A resource bundle is a flat structure, therefore the preceding slash (/) can be omitted for the path.-->
								<!--We can even add space between the button and the input field
								by adding class sapUiSmallMarginEnd to the button.-->
								<!--We add our custom CSS class to the button to precisely define the space between the button and the input field.-->
								<!--<Button text="{i18n>showHelloButtonText}" press=".onShowHello" class="myCustomButton"/>-->
								<!--We add an sap.m.Input control to the view.
								With this, the user can enter a recipient for the greetings.
								The curly brackets {…} indicate that data is taken from the value of the recipient's object name property.
								/recipient/name declares the path in the model.-->
								<!--<Input value="{/recipient/name}" valueLiveUpdate="true" width="60%"/>-->
								<!--To format the output text individually, we remove the description from the input field
								and add a new Text control with the same value.
								Here we also use a small margin to align it with the other content.-->
								<!--We add our custom CSS class (myCustomText)
								and add a theme-dependent CSS class to set the highlight color that is defined in the theme.
								The actual color now depends on the selected theme which ensures that the color always fits to the theme
								and is semantically clear.-->
								<!--<FormattedText htmlText="Hello {/recipient/name}" class="sapUiSmallMargin sapThemeHighlight-asColor myCustomText"/>-->
							<!--</content>-->
						<!--</Panel>-->
						<!--Instead of putting the panel and its content directly into our App view,
						we will move it to a new separate HelloPanel view.
						We refer to this using an XMLView tag in the content aggregation of the panel.-->
						<mvc:XMLView viewName="sap.ui.demo.walkthrough.view.HelloPanel"/>
					</content>
				</Page>
			</pages>
		</App>
	</Shell>
</mvc:View>